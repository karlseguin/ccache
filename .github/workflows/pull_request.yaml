name: Pull Request
on:
  merge_group:
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: Unit Tests
        run: make t
  bench:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # to be able to retrieve the last commit in master branch

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true

      - name: Run benchmark and store the output to a file
        run: |
          set -o pipefail
          make bench | tee ${{ github.sha }}_bench_output.txt

      - name: Get Main branch SHA
        id: get-master-branch-sha
        run: |
          SHA=$(git rev-parse origin/master)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Get benchmark JSON from main branch
        uses: actions/cache/restore@v3
        with:
          path: ./cache/benchmark-data.json
          key: ${{ steps.get-master-branch-sha.outputs.sha }}-${{ runner.os }}-go-benchmark
          fail-on-cache-miss: true

      - name: Compare benchmarks
        uses: benchmark-action/github-action-benchmark@v1
        if: success()
        with:
          alert-threshold: "200%"
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: ${{ github.sha }}_bench_output.txt
          # Where the benchmarks in main are (to compare)
          external-data-json-path: ./cache/benchmark-data.json
          # Do not save the data
          save-data-file: false
          # Workflow will fail when an alert happens
          fail-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Enable Job Summary for PRs
          summary-always: true
